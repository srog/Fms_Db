/*
Deployment script for Fms

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Fms"
:setvar DefaultFilePrefix "Fms"
:setvar DefaultDataPath "C:\Users\s.rogers\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\s.rogers\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
--:r .\SeedData\TearDown.sql
GO

GO
/*
The column [dbo].[News].[GameDetailsId] on table [dbo].[News] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[News])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[Player].[GameDetailsId] on table [dbo].[Player] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Player])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[Team].[GameDetailsId] on table [dbo].[Team] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Team])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[Transfer].[GameDetailsId] on table [dbo].[Transfer] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Transfer])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'The following operation was generated from a refactoring log file c0904928-b78e-4919-a657-ffeab0376e87';

PRINT N'Rename [dbo].[Season].[GameDetailId] to GameDetailsId';


GO
EXECUTE sp_rename @objname = N'[dbo].[Season].[GameDetailId]', @newname = N'GameDetailsId', @objtype = N'COLUMN';


GO
PRINT N'Altering [dbo].[News]...';


GO
ALTER TABLE [dbo].[News]
    ADD [GameDetailsId] INT NOT NULL;


GO
PRINT N'Altering [dbo].[Player]...';


GO
ALTER TABLE [dbo].[Player]
    ADD [GameDetailsId] INT NOT NULL;


GO
PRINT N'Altering [dbo].[Team]...';


GO
ALTER TABLE [dbo].[Team]
    ADD [GameDetailsId] INT NOT NULL;


GO
PRINT N'Altering [dbo].[Transfer]...';


GO
ALTER TABLE [dbo].[Transfer]
    ADD [GameDetailsId] INT NOT NULL;


GO
PRINT N'Altering [dbo].[spInsertPlayer]...';


GO
ALTER PROCEDURE [dbo].[spInsertPlayer]
	@name nvarchar(250),
	@rating int,
	@age int,
	@position int,
	@teamId int,
	@value int,
	@retired bit,
	@injuredWeeks int,
	@gameDetailsId int,
	@id int OUTPUT
AS
DECLARE @result int
	INSERT INTO [Player] ([Name], [Age], [Rating], [Position], [TeamId], [Value], [Retired], [InjuredWeeks], [GameDetailsId])
	VALUES (@name, @age, @rating, @position, @teamId, @value, @retired, @injuredWeeks, @gameDetailsId)

	SET @id = SCOPE_IDENTITY()

	IF @@ERROR = 0 
     SET @result  = 1
  ELSE SET @result = 0

	RETURN @result
GO
PRINT N'Altering [dbo].[spInsertTeam]...';


GO
ALTER PROCEDURE [dbo].[spInsertTeam]

@name nvarchar(250),
	@divisionId int,
	@cash int,
	@stadiumCapacity int,
	@yearFormed int,
	@gameDetailsId int,
	@id int OUTPUT
AS
DECLARE @result int
	INSERT INTO [Team] ([Cash], [DivisionId], [Name], [StadiumCapacity], [YearFormed], [GameDetailsId])
	VALUES (@cash, @divisionId, @name, @stadiumCapacity, @yearFormed, @gameDetailsId)

	SET @id = SCOPE_IDENTITY()

	IF @@ERROR = 0 
     SET @result  = 1
  ELSE SET @result = 0

	RETURN @result
GO
PRINT N'Altering [dbo].[spUpdateTeam]...';


GO
ALTER PROCEDURE [dbo].[spUpdateTeam]
	@id int,
	@name nvarchar(250),
	@divisionId int,
	@cash int,
	@stadiumCapacity int,
	@yearFormed int,
	@gameDetailsId int
AS
	UPDATE [Team] 
	SET [Name] = @name,
	[DivisionId] = @divisionId,
	[Cash] = @cash,
	[StadiumCapacity] = @stadiumCapacity,
	[YearFormed] = @yearFormed,
	[GameDetailsId] = @gameDetailsId
	WHERE [Id] = @id
RETURN 0
GO
PRINT N'Altering [dbo].[spGetSeasonsByGameId]...';


GO
ALTER PROCEDURE [dbo].[spGetSeasonsByGameId]
	@gameDetailsId int
AS

	SELECT * FROM [Season] WHERE [GameDetailsId] = @gameDetailsId
RETURN 0
GO
PRINT N'Altering [dbo].[spInsertSeason]...';


GO
ALTER PROCEDURE [dbo].[spInsertSeason]
	@id int OUTPUT,
	@gameDetailsId int ,
	@startYear int,
	@completed bit = 0
AS
	DECLARE @result int

	INSERT INTO [Season] ([GameDetailsId], [StartYear], [Completed])
	VALUES (@gameDetailsId, @startYear, @completed)

	SELECT @id = SCOPE_IDENTITY()

	IF @@ERROR = 0 
     SET @result  = 1
  ELSE SET @result = 0

RETURN @result
GO
PRINT N'Altering [dbo].[spUpdateSeason]...';


GO
ALTER PROCEDURE [dbo].[spUpdateSeason]
	@id int,
	@gameDetailsId int,
	@startYear int,
	@completed bit
AS
	UPDATE [Season]
	SET [GameDetailsId] = @gameDetailsId,
		[StartYear] = @startYear,
		[Completed] = @completed
	WHERE [Id] = @id
RETURN 0
GO
PRINT N'Creating [dbo].[spAdvanceAllPlayerAges]...';


GO
CREATE PROCEDURE [dbo].[spAdvanceAllPlayerAges]

AS
	UPDATE [Player] SET [Age] = [Age] + 1
RETURN 0
GO
PRINT N'Creating [dbo].[spGetPlayersByGame]...';


GO
CREATE PROCEDURE [dbo].[spGetPlayersByGame]
	@gameDetailsId int
AS
	SELECT * FROM [Player] WHERE [GameDetailsId] = @gameDetailsId
RETURN 0
GO
PRINT N'Creating [dbo].[spGetTeamsByGame]...';


GO
CREATE PROCEDURE [dbo].[spGetTeamsByGame]
	@gameDetailsId int
AS
	SELECT * FROM [Team] WHERE [GameDetailsId] = @gameDetailsId
RETURN 0
GO
PRINT N'Creating [dbo].[spRetirePlayer]...';


GO
CREATE PROCEDURE [dbo].[spRetirePlayer]
	@id int
AS
	UPDATE [Player] SET [Retired] = 1 WHERE [Id] = @id
RETURN 0
GO
PRINT N'Refreshing [dbo].[spGetNews]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spGetNews]';


GO
PRINT N'Refreshing [dbo].[spInsertNews]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spInsertNews]';


GO
PRINT N'Refreshing [dbo].[spGetAllFreeAgents]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spGetAllFreeAgents]';


GO
PRINT N'Refreshing [dbo].[spGetAllPlayers]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spGetAllPlayers]';


GO
PRINT N'Refreshing [dbo].[spGetPlayerById]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spGetPlayerById]';


GO
PRINT N'Refreshing [dbo].[spGetPlayersByTeamId]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spGetPlayersByTeamId]';


GO
PRINT N'Refreshing [dbo].[spUpdatePlayer]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spUpdatePlayer]';


GO
PRINT N'Refreshing [dbo].[spGetAllTeams]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spGetAllTeams]';


GO
PRINT N'Refreshing [dbo].[spGetTeamById]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spGetTeamById]';


GO
PRINT N'Refreshing [dbo].[spGetTeamsByDivision]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spGetTeamsByDivision]';


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c0904928-b78e-4919-a657-ffeab0376e87')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c0904928-b78e-4919-a657-ffeab0376e87')

GO

GO
PRINT N'Update complete.';


GO
